name: sonar

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch: {}

permissions:
  contents: read
  pull-requests: write

jobs:
  analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore & Build backend
        run: |
          dotnet restore backend/src/OnlineCourses.sln
          dotnet build backend/src/OnlineCourses.sln --no-restore -c Release

      - name: Test con cobertura
        run: |
          dotnet test backend/tests/OnlineCourses.Tests.csproj -c Release --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=coverage/

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar dependencias frontend
        run: |
          cd frontend
          npm ci || npm install
          npm run build --if-present

      - name: SonarQube Scan
        run: |
          VERSION="1.0.$(date +%s)"
          echo "Ejecutando análisis versión $VERSION"
          dotnet tool update --global dotnet-sonarscanner --version 6.0.0 || dotnet tool install --global dotnet-sonarscanner --version 6.0.0
          export PATH="$PATH:$HOME/.dotnet/tools"
          # Variables de entorno SONAR_HOST_URL y SONAR_TOKEN deben estar definidas como secrets en el repositorio.
          dotnet-sonarscanner begin /k:"REEMPLAZAR_PROJECT_KEY" /v:"$VERSION" /d:sonar.host.url="$SONAR_HOST_URL" /d:sonar.login="$SONAR_TOKEN" /d:sonar.coverage.exclusions="frontend/**,**/Migrations/**" /d:sonar.cs.opencover.reportsPaths="**/coverage/*.opencover.xml"
          dotnet build backend/src/OnlineCourses.sln -c Release
          dotnet test backend/tests/OnlineCourses.Tests.csproj -c Release --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=coverage/
          dotnet-sonarscanner end /d:sonar.login="$SONAR_TOKEN"

      - name: Quality Gate (espera)
        run: |
          echo "Si se requiere esperar el quality gate usar acción oficial sonarsource/sonarcloud-github-action con secrets."
